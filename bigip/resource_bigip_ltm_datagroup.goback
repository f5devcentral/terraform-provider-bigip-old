package bigip

import (
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	bigip "github.com/scottdware/go-bigip"
)

func resourceBigipLtmDatagroup() *schema.Resource {
	log.Println("Resource schema")
	return &schema.Resource{
		Create: resourceBigipLtmDatagroupCreate,
		//Read:   resourceBigipLtmDatagroupRead,
		//Update: resourceBigipLtmDatagroupUpdate,
		//Delete: resourceBigipLtmDatagroupDelete,
		//Exists: resourceBigipLtmDatagroupExists,
		//Importer: &schema.ResourceImporter{
		//	State: resourceBigipLtmDatagroupImporter,

		Schema: map[string]*schema.Schema{
			"name": &schema.Schema{
				Type:         schema.TypeString,
				Required:     true,
				Description:  "Name of the datagroup",
				ForceNew:     true,
				ValidateFunc: validateF5Name,
			},

			"type_datagroup": &schema.Schema{
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Type string or address",
			},

			"records": &schema.Schema{
				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"nameoftype": &schema.Schema{
							Type:         schema.TypeString,
							Required:     true,
							Description:  "Record name name",
//							ValidateFunc: validateF5Name,
						},

						"datavalue": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
              Computed: true,
						},
		},
	},
},

func resourceBigipLtmDatagroupCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*bigip.BigIP)
	name := d.Get("name").(string)
	typeof := d.Get("type_datagroup").(string)

	recordsraw := d.Get("records").([]interface{})
	records := make([]string, len(recordsraw))
	for i, recordraw := range recordsraw {
		records[i] = recordraw.(string)
	}

	createOpts := RecordSetCreateOpts{
		recordsets.CreateOpts{
			Name:        d.Get("nameoftype").(string),
			DataValue:    d.Get("datavalue").(string),
		},

	}

	//typos := d.Get("type").(string)
	log.Println("[INFO] Creating Data group  " + name)

	d.SetId(name)
	n, err := recordsets.CreateDatagroup(name string, typeof string, createOpts []string)
	if err != nil {
		return fmt.Errorf("Error creating  record set: %s", err)
	}

	if err != nil {
		return err
	}

	return resourceBigipLtmDatagroupRead(d, meta)
}
}
